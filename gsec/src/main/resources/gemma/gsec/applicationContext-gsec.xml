<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<bean id="manualAuthenticationService" class="gemma.gsec.authentication.ManualAuthenticationServiceImpl">
		<constructor-arg ref="authenticationManager"/>
	</bean>

	<bean id="permissionGrantingStrategy"
		  class="org.springframework.security.acls.domain.DefaultPermissionGrantingStrategy">
		<constructor-arg>
			<bean class="gemma.gsec.acl.domain.AuditLoggerImpl"/>
		</constructor-arg>
	</bean>

	<bean id="aclDao" class="gemma.gsec.acl.domain.AclDaoImpl">
		<constructor-arg ref="sessionFactory"/>
		<constructor-arg ref="aclAuthorizationStrategy"/>
		<constructor-arg ref="permissionGrantingStrategy"/>
	</bean>
	<bean id="aclService" class="gemma.gsec.acl.domain.AclServiceImpl">
		<constructor-arg ref="aclDao"/>
	</bean>

	<!-- works with the HttpSessionEventPublisher configured in web.xml -->
	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>

	<bean id="securityService" class="gemma.gsec.SecurityServiceImpl">
		<constructor-arg ref="aclService"/>
		<constructor-arg ref="sessionRegistry"/>
		<constructor-arg ref="objectIdentityRetrievalStrategy"/>
		<constructor-arg ref="sidRetrievalStrategy"/>
		<!-- FIXME: make this a constructor argument, but that currently result in a circular dependency in Gemma -->
		<property name="userManager" ref="userManager"/>
	</bean>

	<bean id="permissionEvaluator" class="org.springframework.security.acls.AclPermissionEvaluator">
		<constructor-arg ref="aclService"/>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
	</bean>

	<!-- needed for the use of @Pre... and @Post... -->
	<bean id="securityExpressionHandler"
		  class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
		<property name="roleHierarchy" ref="roleHierarchy"/>
		<property name="permissionEvaluator" ref="permissionEvaluator"/>
	</bean>

	<bean id="authenticationTrustResolver" class="gemma.gsec.authentication.AuthenticationTrustResolverImpl"/>

	<bean id="objectIdentityRetrievalStrategy" class="gemma.gsec.acl.ObjectIdentityRetrievalStrategyImpl"/>

	<bean id="objectTransientnessRetrievalStrategy" class="gemma.gsec.acl.ObjectTransientnessRetrievalStrategyImpl"/>

	<!-- Customized to use the roleHierarchy and our AclSids (otherwise we wouldn't need to declare this) -->
	<bean id="sidRetrievalStrategy" class="gemma.gsec.acl.AclSidRetrievalStrategyImpl">
		<constructor-arg>
			<ref local="roleHierarchy"/>
		</constructor-arg>
	</bean>

	<!-- Decide whether the user has access to a particular resource, method, or data -->
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<property name="allowIfAllAbstainDecisions" value="false"/>
		<constructor-arg name="decisionVoters">
			<list>
				<ref bean="securableReadVoter"/>
				<ref bean="securableEditVoter"/>
				<ref bean="securableCollectionReadVoter"/>
				<ref bean="securableCollectionEditVoter"/>
				<ref bean="securableMapReadVoter"/>
				<ref bean="securableMapEditVoter"/>
				<ref bean="securableMapValueReadVoter"/>
				<ref bean="securableMapValueEditVoter"/>
				<ref bean="roleHierarchyVoter"/>
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
				<!-- needed for the use of @Pre.. -->
				<bean class="org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter">
					<constructor-arg>
						<bean
							class="org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice">
							<property name="expressionHandler" ref="securityExpressionHandler"/>
						</bean>
					</constructor-arg>
				</bean>
			</list>
		</constructor-arg>
	</bean>

	<!-- role-based voting, in which roles inherit from each other. GROUP_ADMIN has all the rights of GROUP_USER for example. -->
	<bean id="roleHierarchyVoter" class="org.springframework.security.access.vote.RoleHierarchyVoter">
		<constructor-arg>
			<ref local="roleHierarchy"/>
		</constructor-arg>
		<property name="rolePrefix" value="GROUP_"/>
	</bean>

	<bean id="securableReadVoter" class="gemma.gsec.acl.voter.AclEntryVoter">
		<constructor-arg ref="aclService"/>
		<constructor-arg value="ACL_SECURABLE_READ"/>
		<constructor-arg>
			<array>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</array>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
	</bean>


	<!-- Voter that can be applied to any method that takes a securable as an argument (NOT on the return value, this is checked
		before the call) -->
	<bean id="securableEditVoter" class="gemma.gsec.acl.voter.AclEntryVoter">
		<constructor-arg ref="aclService"/>
		<constructor-arg value="ACL_SECURABLE_EDIT"/>
		<constructor-arg>
			<array>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.WRITE"/>
			</array>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
		<property name="objectTransientnessRetrievalStrategy" ref="objectTransientnessRetrievalStrategy"/>
		<property name="grantOnTransient" value="true"/>
	</bean>

	<bean id="securableCollectionReadVoter" class="gemma.gsec.acl.voter.AclEntryCollectionVoter">
		<constructor-arg ref="aclService"/>
		<constructor-arg value="ACL_SECURABLE_COLLECTION_READ"/>
		<constructor-arg>
			<array>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</array>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
	</bean>

	<bean id="securableCollectionEditVoter" class="gemma.gsec.acl.voter.AclEntryCollectionVoter">
		<constructor-arg ref="aclService"/>
		<constructor-arg value="ACL_SECURABLE_COLLECTION_EDIT"/>
		<constructor-arg>
			<array>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.WRITE"/>
			</array>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
		<property name="objectTransientnessRetrievalStrategy" ref="objectTransientnessRetrievalStrategy"/>
		<property name="grantOnTransient" value="true"/>
	</bean>

	<bean id="securableMapReadVoter" class="gemma.gsec.acl.voter.AclEntryMapVoter">
		<constructor-arg ref="aclService"/>
		<constructor-arg value="ACL_SECURABLE_MAP_READ"/>
		<constructor-arg>
			<array>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</array>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
	</bean>

	<bean id="securableMapEditVoter" class="gemma.gsec.acl.voter.AclEntryMapVoter">
		<constructor-arg ref="aclService"/>
		<constructor-arg value="ACL_SECURABLE_MAP_EDIT"/>
		<constructor-arg>
			<array>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.WRITE"/>
			</array>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
		<property name="objectTransientnessRetrievalStrategy" ref="objectTransientnessRetrievalStrategy"/>
		<property name="grantOnTransient" value="true"/>
	</bean>

	<bean id="securableMapValueReadVoter" class="gemma.gsec.acl.voter.AclEntryMapValueVoter">
		<constructor-arg ref="aclService"/>
		<constructor-arg value="ACL_SECURABLE_MAP_VALUE_READ"/>
		<constructor-arg>
			<array>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</array>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
	</bean>

	<bean id="securableMapValueEditVoter" class="gemma.gsec.acl.voter.AclEntryMapValueVoter">
		<constructor-arg ref="aclService"/>
		<constructor-arg value="ACL_SECURABLE_MAP_VALUE_EDIT"/>
		<constructor-arg>
			<array>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.WRITE"/>
			</array>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
		<property name="objectTransientnessRetrievalStrategy" ref="objectTransientnessRetrievalStrategy"/>
		<property name="grantOnTransient" value="true"/>
	</bean>

	<!-- Check: 'GROUP_RUN_AS_' guys are so we can allow some exposed methods to be run by users with lower privileges - such
		as servers or certain user operations that need to happen when users are logging in or signing up. Note that IS_AUTHENTICATED_ANONYMOUSLY
		is not recognized by the role voter, but it is by other uses of this hierarchy. -->
	<bean id="roleHierarchy" class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
		<property name="hierarchy">
			<value>[CDATA[
				GROUP_ADMIN > GROUP_USER
				GROUP_RUN_AS_ADMIN > GROUP_ADMIN
				GROUP_USER > GROUP_ANONYMOUS
				GROUP_RUN_AS_USER >
				GROUP_USER
				GROUP_ADMIN > GROUP_AGENT
				GROUP_AGENT > GROUP_ANONYMOUS
				GROUP_ANONYMOUS > IS_AUTHENTICATED_ANONYMOUSLY
				]]
			</value>
		</property>
	</bean>


	<!-- ACL configuration. This controls how/who can modify ACLs -->
	<bean id="aclAuthorizationStrategy" class="gemma.gsec.acl.AclAuthorizationStrategyImpl">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.core.authority.SimpleGrantedAuthority">
					<constructor-arg value="GROUP_ADMIN"/> <!-- change acl ownership -->
				</bean>
				<bean class="org.springframework.security.core.authority.SimpleGrantedAuthority">
					<constructor-arg value="GROUP_ADMIN"/> <!-- change acl auditing -->
				</bean>
				<bean class="org.springframework.security.core.authority.SimpleGrantedAuthority">
					<constructor-arg value="GROUP_ADMIN"/> <!-- change acl details -->
				</bean>
			</list>
		</constructor-arg>
		<constructor-arg ref="sidRetrievalStrategy"/>
	</bean>

	<!-- After reading an object filter. Throws an exception when access is denied (AFTER_ACL_READ) -->
	<bean id="afterAclRead" class="org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationProvider">
		<constructor-arg ref="aclService"/>
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</list>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
	</bean>

	<!-- After reading an object filter: but return null rather than throwing an exception. (AFTER_ACL_READ_QUIET) -->
	<bean id="afterAclReadQuiet" class="gemma.gsec.acl.afterinvocation.AclEntryAfterInvocationQuietProvider">
		<constructor-arg ref="aclService"/>
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</list>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
	</bean>

	<!-- after reading a collection filter: remove unallowed objects -->
	<bean id="afterAclCollectionRead"
		  class="gemma.gsec.acl.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider">
		<constructor-arg ref="aclService"/>
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</list>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
	</bean>

	<!-- after reading a map: filter by keys (securable) and also values, if they are securable -->
	<bean id="afterAclMapRead" class="gemma.gsec.acl.afterinvocation.AclEntryAfterInvocationMapFilteringProvider">
		<constructor-arg ref="aclService"/>
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</list>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
	</bean>

	<!-- after reading a map: filter by values -->
	<bean id="afterAclMapValuesRead"
		  class="gemma.gsec.acl.afterinvocation.AclEntryAfterInvocationMapValueFilteringProvider">
		<constructor-arg ref="aclService"/>
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</list>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
	</bean>


	<!-- special filter that returns only Non-public data that user can edit -->
	<bean id="afterAclMyDataRead"
		  class="gemma.gsec.acl.afterinvocation.AclEntryAfterInvocationOwnedCollectionFilteringProvider">
		<constructor-arg ref="aclService"/>
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.WRITE"/>
			</list>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
	</bean>

	<!-- special filter that returns only Non-public data that user can read -->
	<bean id="afterAclMyPrivateDataRead"
		  class="gemma.gsec.acl.afterinvocation.AclEntryAfterInvocationPrivateCollectionFilteringProvider">
		<constructor-arg ref="aclService"/>
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.WRITE"/>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</list>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.Securable"/>
	</bean>

	<bean id="afterAclValueObjectCollection"
		  class="gemma.gsec.acl.afterinvocation.AclEntryAfterInvocationValueObjectCollectionFilteringProvider">
		<constructor-arg ref="aclService"/>
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</list>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.SecureValueObject"/>
	</bean>

	<bean id="afterAclValueObjectMap"
		  class="gemma.gsec.acl.afterinvocation.AclEntryAfterInvocationValueObjectMapFilteringProvider">
		<constructor-arg ref="aclService"/>
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</list>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.SecureValueObject"/>
	</bean>

	<bean id="afterAclValueObjectMapValue"
		  class="gemma.gsec.acl.afterinvocation.AclEntryAfterInvocationValueObjectMapValueFilteringProvider">
		<constructor-arg ref="aclService"/>
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</list>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.SecureValueObject"/>
	</bean>

	<bean id="afterAclValueObject" class="gemma.gsec.acl.afterinvocation.AclEntryAfterInvocationValueObjectProvider">
		<constructor-arg ref="aclService"/>
		<constructor-arg>
			<list>
				<util:constant static-field="org.springframework.security.acls.domain.BasePermission.READ"/>
			</list>
		</constructor-arg>
		<property name="objectIdentityRetrievalStrategy" ref="objectIdentityRetrievalStrategy"/>
		<property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
		<property name="processDomainObjectClass" value="gemma.gsec.model.SecureValueObject"/>
	</bean>


	<!-- needed for the use of @Post.. -->
	<bean id="postInvocationAdviceProvider"
		  class="org.springframework.security.access.prepost.PostInvocationAdviceProvider">
		<constructor-arg>
			<bean class="org.springframework.security.access.expression.method.ExpressionBasedPostInvocationAdvice">
				<constructor-arg ref="securityExpressionHandler"/>
			</bean>
		</constructor-arg>
	</bean>


</beans>